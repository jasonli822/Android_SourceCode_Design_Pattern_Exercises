第15章 抓住问题的核心--模板方法模式

模板方法模式的定义
    定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的
  某些特定步骤。

模板方法模式的简单示例
    模板方法实际上是封装一个固定的流程，就像是一套执行的模板一样，第一步该做什么，第二步该做什么都已经在抽象类中定义好。
  而子类可以有不同的算法实现，在框架不被修改的情况下实现某些步骤的算法替换，下面以打开计算机这个动作来简单演示一下模板
  方法。打开计算机的整个过程都是相对固定的，首先启动计算机电源，计算机检测到自身状态没有问题时将进入操作系统，对用户进行
  验证之后即可登录计算机，下面我们使用模板方法来模拟一下这个过程。

    通过示例代码可以看到，在startUp方法中有一些固定的步骤，依次为开启电源、检查硬件、加载系统、用户登录4个步骤，
  这4个步骤是计算机开机过程中不会变动。

    但是，不同的用户的这几个步骤的实现可能各不相同，因此，子类需要覆写相应的方法来进行自定义处理，这里需要注意的是
  startUp为final方法，这样就保证了逻辑流程不能被子类修改，子类只能够改变某一步骤中的具体实现，这样就保证了这个逻辑
  流程的稳定性。

小结
   模板方法模式用4个字概括就是：流程性封装。也就是把某个固定的流程封装到一个final函数中，并且让子类能够定制这个
 流程中的某些或者所有步骤，这就要求父类提取共用的代码，提升代码的复用率，同时也带来了更好的可扩展性。

   优点：
     (1) 封装不变部分，扩展可变部分。
     (2) 提取公告部分代码，便于维护。

   缺点：
     模板方法会带来阅读代码的难度，会让用户觉得难以理解。
