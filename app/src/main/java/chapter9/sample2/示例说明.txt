小民某天接到通知说需要出差去X国进修学习新技术，小民听到这消息心中一喜，于是收拾完背包后踏上了去X国进修的旅途。
小民去X国学习一趟花费了近5万元，于是小民上班后的第一天就向组长申请报销费用，组长一看是笔不小的数目，他没有权限
审批，于是组长就拿着票据去找部门主管，主管一看要报这么多钱，自己权限内只能批五千以下的费用，这完全超出了自己的权限
范围，于是主管又跑去找经理，经理一看二话不说直接拿着票据奔向了老板办公室，因为他也只能批一万以下的费用。类似这样的
情况对上班族来说肯定并不少见，上面的这个情景其实就是一个责任链的小例子，每一个人，准确的说是每一类人代表了这条链上
的一个节点，小民是请求的发起者，而老板则是处于链条顶端的类，小名从链的底端开始发出一个申请报账的请求，首先由组长处理
该请求，组长比对后发现自己权限不够于是将该请求转发给位于链中下一个节点的主管，主管比对后也发现自己权限不够又将该请求
转发给经理，而经理也基于同样的原因将请求转发给老板，这样层层转达直至请求被处理，从中大家可以看到显而易见的事，就是
至始至终小民只与组长产生了关联，后面具体由谁处理的票据，小名并不关心，唯一在乎的是报账的结果，责任链模式在这里很好
地将请求的发起者与处理者解耦。

如果我们在代码中模拟这个过程也是很直观的，首先还是先声明一个抽象的领导类Leader，在这个抽象的领导类中只做了两件事，
一是定义了两个抽象接口方法来确定一个领导者应有的行为和属性，二是声明了一个处理报账请求的方法来确定当前领导是否有能力
处理报账请求，如果没有这权限，则将该请求转发给上级领导处理。接下来则是各个领导类的实现，最后小民从组长开始发起申请报账。

//... 代码略

这里大家可能会想，可不可以直接越过组长找主管报账呢？答案是肯定的，这也是责任链模式的灵活之处，请求的发起可以从责任链
的任何一个节点处开始，同时也可以改变责任链内部传递的规则，如主管不在，我们完全可以跨过主管从组长直接将请求转送给经理。

对于责任链中的一个处理者对象，其只有两个行为，一是处理请求，二是将请求转送给下一个节点，不允许某个处理者对象在处理了
请求后又将请求转送给上一个节点的情况。对于一条责任链来说，一个请求最终只有两种情况，一是被某个处理对象所处理，另一个是所有
对象均未对其处理，对于前一种情况我们称该责任链为纯的责任链，对于后一种情况我们称之为不纯的责任链，在实际应用中，
我们所见到的责任链模式大多为不纯的责任链。

