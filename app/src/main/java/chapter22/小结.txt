第22章 对象共享，避免创建多对象 -- 享元模式

享元模式介绍
    享元模式是对象池的一种实现，它的英文名称叫做Flyweight，代表轻量级的意思。享元模式用来尽可能减少内存使用量，
它适合用于可能存在大量重复对象的场景，来缓存可共享的对象，达到对象共享，避免创建过多对象的效果，这样一来就可以提升
性能、避免内存移除等。

    享元对象中的部分状态是可以共享的，可以共享的状态为内部状态，内部状态不会随着环境变化；不可共享的状态则称之为
外部状态，它们会随着环境的改变而改变。在享元模式中会建立一个对象容器，在经典的享元模式中该容器为一个Map，它的键是
享元对象的内部状态，它的值就是享元对象本身。客户端程序通过这个内部状态从享元工厂中获取享元对象，如果有缓存则使用
缓存对象，否则创建一个享元对象并且存入容器中，这样一来就避免了创建过多对象的问题。

享元模式的定义
    使用共享对象可有效地支持大量的细粒度对象。

享元模式的简单示例
    过年买火车票问题。我们在TicketFactory添加了一个map容器，并且以出发地 + "-" + 目的地为键、以车票对象作为值
存储车票对象。这个map的键就是我们说的内部状态，在这里就是出发地、横杠、目的地拼接起来的字符串，如果没有缓存则创建
一个对象，并且将这个对象缓存到map中，下次再有这类请求时则直接从缓存中获取。这样即使有10000个请求北京到青岛的车票
信息，那么出发地是北京、目的地是青岛的车票对象只有一个。这样这个就像就从10000减少到了1个，避免了大量的内存占用及
频繁的GC操作。

小结
    享元模式实现比较简单，但是它的作用在某些场景确实极其重要的。它可以大大减少应用程序创建的对象，降低程序内存的
占用，增强程序的性能，但它同时也提高了系统的复杂性，需要分离出外部状态和内部状态，而且外部状态具有固化特性，不应
该随内部状态改变而改变，否则导致系统的逻辑混乱。
    享元模式的优点在于它大幅度降低了内存中对象的数量。但是，它做到这一点所付出的代价也是很高的。

    享元模式使得系统更加复杂。为了使对象可以共享，需要将一些状态外部化，这使得程序的逻辑复杂化。

    享元模式将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长。
