第20章 得心应手的“粘合剂” -- 适配器模式

适配器模式介绍
    适配器模式在我们开发中使用率极高，从代码中随处可见的Adapter就可以判断出来。从最早的ListView、GridView到现在
最新的RecycleView都需要使用Adapter，并且在开发中我们遇到的优化问题、出错率较大的地方也基本都出自Adapter，
这是一个让人又爱又恨的角色。

    说到底，适配器是将两个不兼容的类融合在一起，它有点像粘合剂，将不同的东西通过一种转换使得它们能够协作起来。例如
，经常碰到要在两个没有关系的类型之间进行交互，第一个解决方案是修改各自的接口，但是如果没有源代码或者我们不愿意为了
一个应用而修改各自的接口，此时怎么办？这种情况我们往往会使用一个Adapter，在这两种接口之间创建一个“混血儿”接口，
这个Adapter会将这两个接口进行兼容，在不修改原有代码的情况下满足需求。


适配器模式的定义
    适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在
一起工作。


适配器模式
    适配器模式也分为两种，即类适配器模式和对象适配器模式，首先学习类适配器模式。

    类适配器模式是通过实现Target接口以及集成Adaptee类来实现接口转换。例如，目标接口需要的是operation2，但是
Adaptee对象只有一个operation3，因此就出现了不兼容的情况。此时通过Adapter实现一个operation2函数将Adaptee的
operation3转换为Target需要的operation2，以此实现兼容。

    角色介绍
    Target：目标角色，也就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。
    Adaptee：现在需要适配的接口。
    Adapter：适配器角色，也是本模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是
具体类。

适配器模式的简单示例
    用电源接口做例子，笔记本电脑的电源一般都是用5V电压，但是我们生活中的电线电压一般都是220V。这个时候就出现了不
匹配的状况，在软件开发中我们称之为接口不兼容，此时就需要适配器来进行一个接口转换。在这个例子中，5V电压就是Target
接口，220电压就是Adapter类，而将电压从220V转换到5V就是Adapter.


    在实际开发中Adapter通常应用于进行不兼容的类型转换的场景，还有一种就是输入有无数种情况，但是输出类型是统一的，
我们可以通过Adapter返回一个统一的输出，而具体的输入留给用户处理，内部只需知道输出的是符合要求的类型即可。例如
ListView的Adapter，用户的Item View各式各样，但最终都是属于View类型，ListView只需要知道getView返回的是一个View
即可，具体是什么View类型并不需要ListView关心。而在使用Adapter模式的过程中建议尽量使用对象适配器的实现方式，多用
合作或者聚合，少用继承。当然，具体问题具体分析，根据需要选用实现方式，最适合的才是最好的。

