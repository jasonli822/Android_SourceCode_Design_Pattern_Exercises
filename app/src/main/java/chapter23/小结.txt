第23章 统一编程接口--外观模式

外观模式介绍
    外观模式(Facade)在开发过程中的运用频率非常高，尤其是在现阶段各种第三方SDK充斥在我们周边，而这些SDK很大概率
会使用外观模式。通过一个外观类使得整个系统的接口只有一个统一的高层接口，这样能够降低用户的使用成本，也对用户屏蔽
了很多实现细节。当然，在我们开发过程中，外观模式也是我们封装API常用的手段，例如网络模块、ImageLoader模块等。可能
你已经在开发中运用过无数次外观模式，只是没有在理论层面认识它，本章我们就从理论结合实践的角度学习这个模式。

外观模式的定义
    要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式(Facade模式)提供一个高层次的接口，使得
子系统更易于使用。

外观模式的简单示例
    生活中使用外观模式的例子非常大多，任何一个类似中央调度结构的组织都类似外观模式。举个简单的例子，手机就是一个
外观模式的例子，它集合了电话功能、短信功能、GPS、拍照等于一身，通过手机你就可以完成各种功能。而不是当你打电话时
使用一个诺基亚 1100，要拍照时非得用一个相机，如果是这样每使用一个功能你就必须操作特定的设备，会使得整个过程很繁琐。
而手机给了你一个统一的入口，集电话、上网、拍照等功能于一身，使用方便，操作简单。下面我们简单模拟一下手机外观模式的
实现，首先我们建立一个MobilePhone类。

    MobilePhone 类中含有两个子系统，也就是拨号系统和拍照系统，MobilePhone将这两个系统封装起来，为用户提供一个
统一的接口，也就是说用户只需要通过MobilePhone这个类就可以操作打电话和拍照这两个功能。
    从上述代码中可以看到，外观模式就是统一接口封装。将子系统的逻辑、交互隐藏起来，为用户提供一个高层次的接口，使得
系统更加易用，同时也对外隐藏了具体的实现，这样即使具体的子系统发生了变化，用户也不会感知到，因为用户使用的是Facede
高层接口，内部的变化对于用户来说并不可见。这样一来就将变化隔离开来，使得系统也更为灵活。


小结
    外观模式是一个高频率使用的设计模式，它的精髓就在于封装二字。通过一个高层次结构为用户提供统一的API入口，使得
用户通过一个类型就基本能够操作整个系统，这样减少了用户使用成本，也能够提升系统的灵活性。

优点
    (1) 对客户程序隐藏子系统细节，因而减少了客户对于子系统的耦合，能够拥抱变化。
    (2) 外观类对子系统的接口封装，使得系统更易于使用。

缺点
    (1) 外观类接口膨胀。由于子系统的接口都有外观类统一对外暴露，使得外观类的API接口较多，在一定程度上增加了用户
使用成本。
    (2) 外观类没有遵循开闭原则，当业务出现变更时，可能需要直接修改外观类。