第13章 编程中的“后悔药” -- 备忘录模式

备忘录模式介绍
    备忘录模式是一种行为模式，该模式用于保存对象当前的状态，并且在之后可以再次恢复到此状态，这有点像我们平时说的“后悔药”。
    备忘录模式实现的方式需要保证被保存的对象状态不能被对象从外部访问，目的是为了保护好被保存的这些对象状态的完整性以及
    内部实现不向外暴露。

备忘录模式的定义
    在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样，以后就可将该对象恢复到原先保存的状态。

备忘录模式的使用场景
    (1) 需要保存一个对象在某一个时刻的状态或部分状态。
    (2) 如果用一个接口来让其他对象得到这些状态，将会暴露对象的实现细节并破坏对象的封装性，一个对象不希望外界直接访问其
  内部状态，通过中间对象可以间接访问其内部状态。


备忘录模式的简单示例
    对备忘录模式来说，比较贴切的场景应该是游戏中的存档功能，该功能就是将游戏进度存储到本地文件系统或者数据库系统中，
  下次再次进入时从本地加载进度，使得玩家能够继续上一次的游戏之旅，这里我们就以“使命召唤”这款游戏为例来简单演示一下备忘录模式的实现。

  首先我们建立游戏类、备忘录类、Caretaker类，玩游戏到某个节点对游戏进行存档，然后退出游戏，再重新进入时从存档中读取进度，并且进入存档时的进度。


  在CallOfDuty游戏类中，我们存储了几个关键字段，关卡、人物生命值、武器，当调用play函数玩游戏时，我们对关卡和人物的生命值进行修改。在该类中可以通过
  createMemoto函数来创建该用户的备忘录对象，也就是将自身的状态保存到一个Memoto对象中。外部可以通过restore函数将CallOfDuty对象的状态从备忘录对象中恢复。

  备忘录对象Memoto它只是存储CallOfDuty对象的字段，这是一个无状态、无操作的实体类，只负责存储originator角色的一些数据，防止外部直接访问Originator.

  备忘录的操作者Caretaker。Caretaker类的职责很简单，就是负责管理Memoto对象，也就是备忘录对象。

  看看客户端Client使用的代码，大致有如下4步：
  (1) 开始游戏，闯关升级;
  (2) 游戏退出之前进行存档;
  (3) 退出游戏
  (4) 重新启动游戏，从存档中恢复游戏进度

  CallOfDuty 在这里为Originator角色，也就是需要存储数据的对象，在这里并没有直接存储CallOfDuty的对象，而是通过Memoto对CallOfDuty对象的数据进行存储，然后再
  存储Memoto对象，最终对Memoto的存取操作则交给Caretaker对象。在这个过程中，各个角色职责清晰、单一，代码也比较简单，即对外屏蔽对CallOfDuty角色的直接访问，在满足
  了对象状态存取功能的同时也使得该模块的结构保持清晰，整洁。