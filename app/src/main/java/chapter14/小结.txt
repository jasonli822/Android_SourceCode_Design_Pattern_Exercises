第14章 解决问题的“第三者”--迭代器模式

迭代器模式介绍
    迭代器模式(Iterator Pattern)又称为游标(Cursor)模式，是行为型设计模式之一。迭代器模式算是一个比较古老的设计模式，
  其源于对容器的访问，比如Java中的List、Map、数组等，我们知道对容器对象的访问必然会涉及遍历算法，我们可以将遍历的方法
  封装在容器中，或者不提供遍历方法。如果我们将遍历的方法封装到容器中，那么对于容器类来说就承担了过多的功能，容器类不仅
  要维护自身内部的数据元素而且还要对外提供遍历接口方法，因为遍历状态的存储问题还不能对同一个容器同时进行多个遍历操作，
  如果我们不提供遍历方法而让使用者自己去实现，又会让容器的内部细节暴露无遗，证因在此，迭代模式应运而生，在客户访问类与容器
  体之间插入了一个第三者--迭代器，很好的解决了上面的弊端。

迭代器模式的定义
    提供一种顺序访问一个容器内对象中的各个元素，而又不需要暴露该对象的内部表示。

迭代器模式的使用场景
    遍历一个容器对象时。

小结
    对于迭代模式来首，其自身优点很明显也很单一，支持以不同的方式去遍历一个容器对象，也可以有多个遍历，弱化了容器类与遍历算法之间的关系，
  而其缺点就是对类文件的增加。

    迭代器模式发展至今，几乎每一种高级语言都有相应的内置实现，对于开发者而言，已经极少会去由自己来实现迭代器了，因此，对于迭代器更多是在于
  了解而非应用。