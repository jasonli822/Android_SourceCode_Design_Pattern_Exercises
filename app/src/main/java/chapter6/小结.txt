第6章 创建型设计模式--抽象工厂模式

抽象工厂模式介绍
    抽象工厂模式(Abstract Factory Pattern)，也是创建型设计模式之一。第5章中我们已经了解了工厂方法模式，那么这个抽象工厂又是怎么一回事呢？
大家联想一下现实生活中的工厂肯定都是具体的，也就是说每个工厂都会产生某一种具体的产品，那么抽象工厂意味着生产出来的产品是不确定的，
那岂不是很奇怪？抽象工厂模式起源于以前对不同操作系统的图形化解决方案，如不同操作系统中的按钮和文本框控件其实不同，展示效果也不一样，对于
每一个操作系统，其本身就构成一个产品类，而按钮与文本框控件也构成一个产品类，两种产品类两种变化，各自有自己的特性，如Android中的Button和
TextView,iOS中的Button和TextView，Windows Phone中的Button和TextView等。

抽象工厂模式的定义
    为创建一组相关或者是相互依赖的对象提供一个接口，而不是需要指定它们的具体类。


抽象工厂模式说明
    虽然抽象工厂方法模式的类繁多，但是，主要还是分为4类。
    AbstractFactory：抽象工厂角色，它声明了一组用于创建一种商品的方法，每一个方法对应一种商品，如上述类中的AbstractFactory中就定义了两个方法，
                    分别创产品A和产品B。

    ConcreteFactory：具体工厂角色，它实现了在抽象工厂中定义的创建产品的方法，生成一组具体的产品，这些产品构成了一个产品类，每一个产品都位于某个产品
                    等级结构中，如上述图中的ConcreteFactory1和ConcreteFactory2。

    AbstractProduct：抽象产品角色，它为每种产品声明接口，比如上述类图中的AbstractProductA和AbstractProductB。


    ConcreteProduct：具体产品角色，它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法，如上述类中的ConcreteProductA1、ConcreteProductA2、
                    ConcreteProductB1、ConcreteProductB2。


小结：
    抽象工厂模式在Android开发中使用得并不多，大家看到源码中的应用其实也是极少的。主要是在开发过程中很少会出现多个产品种类的情况，大部分情况下我们使用工厂模式
    即可解决，因此，这里对该模式不再做过多的介绍。

